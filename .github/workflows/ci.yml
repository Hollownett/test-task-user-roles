name: CI (Backend + Frontend E2E)

on:
  push:
    branches: [ main, develop ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BACKEND_DIR: ./backend
  FRONTEND_DIR: ./frontend

jobs:
  backend-tests:
    name: Backend Build & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            ${{ env.BACKEND_DIR }}/package-lock.json

      - name: Install (backend)
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      - name: Lint (backend)
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run lint --if-present

      - name: Unit tests (backend)
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm test -- --coverage
        env:
          NODE_ENV: test

      - name: E2E tests (backend, SQLite in-memory)
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_TYPE: sqlite
          DATABASE_DATABASE: ":memory:"
          DATABASE_SYNCHRONIZE: "true"
          DATABASE_LOGGING: "false"

      - name: Upload backend coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: ${{ env.BACKEND_DIR }}/coverage

  frontend-e2e:
    name: Frontend Build & E2E
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [backend-tests]  # optional; remove if you want parallel

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            ${{ env.BACKEND_DIR }}/package-lock.json
            ${{ env.FRONTEND_DIR }}/package-lock.json

      # Backend install & build
      - name: Install (backend)
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      - name: Build (backend)
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run build --if-present

      - name: Start backend
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          # Try prod first; fallback to dev if needed
          (npm run start:prod || npm run start:dev) &
          echo $! > backend.pid
        env:
          NODE_ENV: test
          PORT: 3000
          DATABASE_TYPE: sqlite
          DATABASE_DATABASE: ":memory:"
          DATABASE_SYNCHRONIZE: "true"
          DATABASE_LOGGING: "false"

      - name: Wait on backend
        run: npx --yes wait-on http://127.0.0.1:3000/health --timeout 90000 --interval 500

      # Frontend install & build
      - name: Install (frontend)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Unit tests (frontend)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm test -- --coverage

      - name: Build (frontend)
        working-directory: ${{ env.FRONTEND_DIR }}
        env:
          VITE_API_BASE: http://127.0.0.1:3000
        run: npm run build

      - name: Start Vite preview
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npx vite preview --host --port 5173 &
          echo $! > frontend.pid

      - name: Wait on frontend
        run: npx wait-on http://127.0.0.1:5173/ || npx wait-on http://localhost:5173/

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles(format('{0}/package-lock.json', env.FRONTEND_DIR)) }}
      - name: Install Playwright
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npx playwright install --with-deps

      - name: E2E (Playwright)
        working-directory: ${{ env.FRONTEND_DIR }}
        env:
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:5173
          API_BASE_URL: http://127.0.0.1:3000
          NODE_ENV: test
        run: |
          npm run e2e --reporter=html,line
          # Save the HTML report path
          echo "REPORT_DIR=$(npx playwright show-report --print-location)" >> $GITHUB_ENV

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ${{ env.REPORT_DIR }}

      - name: Stop services
        if: always()
        run: |
          if [ -f backend.pid ]; then kill -9 $(cat backend.pid) || true; fi
          if [ -f frontend.pid ]; then kill -9 $(cat frontend.pid) || true; fi
